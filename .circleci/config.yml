version: 2
jobs:
  #First job, checkouts code and node deps
  checkout-setup:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8.10
    steps:
      - checkout
      # Restore dependencies cache
      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "package.json" }}
      # Install dependencies
      - run:
          name: install-dependencies
          command: npm i 
      # Save dependencies cache
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      # Persist data
      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./

  # Run unit tests and codecoverage
  unit-tests:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8.10
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: install-dependencies
          command: sudo npm i -g codecov
      - run:
          name: test
          command: npm test && codecov
      # Send codecoverage report to codecov.io (Needs the CODECOV_TOKEN env for private repo)
      - run:
          name: code-coverage
          command: bash <(curl -s https://codecov.io/bash)
      # Store test results for the "Test Summary" tab
      - store_test_results:
          path: test-results
      # Store test results in the "Artifacts" tab
      - store_artifacts:
          path: test-results
      # Store test reports in the "Artifacts" tab
      - store_artifacts:
          path: test-reports
      # Store coverage in the "Artifacts" tab
      - store_artifacts:
          path: coverage

  # deploy testing version
  deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8.10
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: install-dependencies
          command: sudo npm i -g serverless@1.41.1 #1.42 has issues with cors
      - run: 
          name: config-serverless
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npm run config::master
            else
              npm run config::branch
            fi
      - run: 
          name: build
          command: npm run build
      - run:
          name: deploy-to-aws
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              sls deploy --stage master
            else
              sls deploy --stage `echo ${CIRCLE_BRANCH} | sed 's/\//-/g'`
            fi
      - run: 
          name: create-env.json
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              node dev-scripts/create-newman-env https://alcala.uport.me > env.json
            else
              node dev-scripts/create-newman-env https://alcala.uport.space/`echo ${CIRCLE_BRANCH} | sed 's/\//-/g'` > env.json
            fi
      # Persist env.json
      - persist_to_workspace:
          root: ~/repo
          paths:
            - env.json
  
  # Run functional tests
  e2e-tests:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8.10
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: install-dependencies
          command: sudo npm i -g newman newman-reporter-junitxray newman-reporter-htmlextra
      - run:
          name: newman-tests
          command: | 
            mkdir -p test-results/newman
            mkdir test-reports
            newman run e2e-tests/alcala.postman_collection.json -e env.json --bail --reporters htmlextra,junitxray --reporter-htmlextra-export test-reports --reporter-junitxray-export test-results/newman/results.xml
      # Store test results for the "Test Summary" tab
      - store_test_results:
          path: test-results
      # Store test results in the "Artifacts" tab
      - store_artifacts:
          path: test-results
      # Store test reports in the "Artifacts" tab
      - store_artifacts:
          path: test-reports
  
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout-setup
      - unit-tests:
          requires:
            - checkout-setup
      - deploy:
          requires:
            - checkout-setup
      - e2e-tests:
          requires:
            - deploy
    